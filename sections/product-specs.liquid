{% if product.type == 'Ramp' or product.type == 'Dock' %}
  {{ 'component-image-with-text.css' | asset_url | stylesheet_tag }}

  {%- style -%}
    .section-{{ section.id }}-padding {
    	padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    	padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    }

    @media screen and (min-width: 750px) {
    	.section-{{ section.id }}-padding {
    		padding-top: {{ section.settings.padding_top }}px;
    		padding-bottom: {{ section.settings.padding_bottom }}px;
    	}
    }
  {%- endstyle -%}

  <div class='section-{{ section.id }}-padding gradient color-{{ section.settings.section_color_scheme }} page-width'>
    {% if section.settings.title != blank %}
      <div class='tw-flex tw-justify-center tw-items-center tw-py-12 lg:tw-py-16 lg:tw-mb-16'>
        <h2 class='tw-text-center tw-text-[24px] md:tw-text-[36px] tw-font-medium tw-text-black tw-max-w-[280px] lg:tw-max-w-[400px] tw-tracking-normal'>
          {{ section.settings.title }}
        </h2>
      </div>
    {% endif %}

    <div class=' color-{{ section.settings.section_color_scheme_inner }} tw-rounded-[20px] tw-p-8 max-md:tw-p-[8px] max-md:tw-mx-[-16px]'>
      {% if product.metafields.compare.specifications != blank %}
        {% for compare_product in product.metafields.compare.products.value %}
          <div
            class='product-specs{% if product.handle == compare_product.handle %} active{% endif %}'
            data-handle='{{ compare_product.handle }}'
          >
            <div class='product-specs__header tw-bg-deep tw-rounded-[10px] tw-overflow-hidden tw-relative'>
              {% if product.metafields.compare.products != blank %}
                <div class='tw-pt-4 lg:tw-pt-16 tw-px-8 lg:tw-px-0 tw-flex tw-justify-center tw-items-center'>
                  <div class='tw-flex tw-justify-start tw-items-center tw-border tw-border-white/30 tw-rounded-full max-md:tw-overflow-scroll'>
                    <ul class='tw-inline-flex tw-gap-4 tw-justify-center tw-p-2 lg:tw-p-3'>
                      {% for compare_list__product in product.metafields.compare.products.value %}
                        <li>
                          <button
                            class='button spec-button tw-transition-all tw-duration-300 tw-p-1 tw-px-3 lg:tw-px-12{% if compare_product.handle == compare_list__product.handle %} active{% endif %}'
                            data-handle='{{ compare_list__product.handle }}'
                          >
                            <span class='tw-text-[10px] lg:tw-text-[14px] tw-whitespace-nowrap'>
                              {{- compare_list__product.title -}}
                            </span>
                          </button>
                        </li>
                      {% endfor %}
                    </ul>
                  </div>
                </div>
              {% endif %}
              <div class='product-specs__media tw-bg-deep tw-rounded-[10px] tw-overflow-hidden tw-cursor-none'>
                {% if compare_product.metafields.compare.specifications.value.video != blank %}
                  <canvas class='tw-max-w-full tw-w-full'></canvas>
                  {% render 'responsive-video',
                    video: compare_product.metafields.compare.specifications.value.video.value,
                    classes: 'responsive-video tw-max-w-full',
                    video_class: 'tw-object-cover tw-h-full tw-object-bottom tw-absolute tw-opacity-0',
                    defer: false,
                    autoplay: false
                  %}
                {% endif %}
              </div>

              <div class='product-specs__overlay tw-flex tw-w-full tw-justify-between tw-items-center tw-p-8 lg:tw-p-16 tw-absolute tw-bottom-0 tw-left-0 tw-right-0 tw-mx-auto {% if compare_product.id != product.id %} tw-max-w-[600px]{% else %} tw-max-w-[480px]{% endif %}'>
                {% if compare_product.metafields.compare.specifications.value.max_dog_weight != blank %}
                  <div class='tw-pointer-events-none tw-flex tw-flex-col tw-justify-between tw-items-start md:tw-items-center'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[10px] md:tw-text-[14px] md:pb-6 tw-block tw-mb-2'
                      >Capacity</span
                    >
                    <span class='tw-font-normal tw-text-white tw-text-[14px] md:tw-text-[24px]'>
                      Up to {{ compare_product.metafields.compare.specifications.value.max_dog_weight }}
                    </span>
                  </div>
                {% endif %}
                {% if compare_product.price != blank %}
                  <div class='tw-pointer-events-none tw-flex tw-flex-col tw-justify-between tw-items-end md:tw-items-center'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[10px] md:tw-text-[14px] md:pb-6 tw-block tw-mb-2'
                      >Price</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px] md:tw-text-[24px]'>
                      {{ compare_product.price | money_without_trailing_zeros }}
                    </span>
                  </div>
                {% endif %}
                {% if compare_product.id != product.id %}
                  <div class='tw-flex tw-flex-col tw-justify-between tw-items-end md:tw-items-center'>
                    <button class="button button--primary tw-transition-all tw-duration-300 tw-p-1 tw-px-3 lg:tw-px-12 active !tw-bg-[#f9c33c] !tw-border[#f9c33c]">
                      <span class="tw-text-[14px] tw-whitespace-nowrap">Shop Now</span>
                    </button>
                  </div>
                {% endif %}
              </div>
            </div>

            <div class='product-specs__list tw-my-12 tw-py-12 tw-overflow-hidden tw-relative tw-flex lg:tw-gap-12 tw-flex-col md:tw-flex-row lg:tw-mb-0 lg:tw-pb-0 max-md:tw-px-[16px]'>
              <ul class='tw-w-full md:tw-w-1/2'>
                {% if compare_product.metafields.compare.specifications.value.platform_length != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Platform Length</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.platform_length -}}
                    </span>
                  </li>
                {% endif %}
                {% if compare_product.metafields.compare.specifications.value.platform_width != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Platform Width</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.platform_width -}}
                    </span>
                  </li>
                {% endif %}
                {% if compare_product.metafields.compare.specifications.value.platform_depth != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Platform Depth</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.platform_depth -}}
                    </span>
                  </li>
                {% endif %}
                {% if compare_product.metafields.compare.specifications.value.stowed_dimensions != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Stowed Dimensions</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.stowed_dimensions -}}
                    </span>
                  </li>
                {% endif %}
              </ul>

              <ul class='tw-w-full md:tw-w-1/2'>
                {% if compare_product.metafields.compare.specifications.value.ramp_width != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Ramp Width</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.stowed_dimensions -}}
                    </span>
                  </li>
                {% endif %}
                {% if product.metafields.compare.specifications.value.ramp_depth != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Ramp Depth</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.ramp_depth -}}
                    </span>
                  </li>
                {% endif %}

                {% if compare_product.metafields.compare.specifications.value.max_dog_weight != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Max Weight</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.max_dog_weight -}}
                    </span>
                  </li>
                {% endif %}
                {% if compare_product.metafields.compare.specifications.value.product_weight != blank %}
                  <li class='tw-flex tw-justify-between tw-items-center tw-py-6 tw-border-b-2 tw-border-white/30'>
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'
                      >Product Weight</span
                    >
                    <span class='tw-font-normal tw-text-body tw-ligatures-off tw-text-white tw-text-[14px]'>
                      {{- compare_product.metafields.compare.specifications.value.product_weight -}}
                    </span>
                  </li>
                {% endif %}
              </ul>
            </div>
            {% if compare_product.metafields.compare.specifications.value.diagrams != blank %}
              <div class='product-specs__footer tw-flex tw-justify-between tw-items-center tw-mt-12 tw-pb-12 tw-flex-col lg:tw-flex-row lg:tw-mt-0'>
                {% for diagram in compare_product.metafields.compare.specifications.value.diagrams.value %}
                  {% if forloop.first %}
                    {% assign classes = 'img responsive-image tw-w-full lg:tw-w-[65%]' %}
                  {% else %}
                    {% assign classes = 'img responsive-image tw-w-full lg:tw-w-[35%]' %}
                  {% endif %}

                  {% render 'responsive-image', media: diagram, classes: classes, defer: true %}
                {% endfor %}
              </div>
            {% endif %}
          </div>
        {% endfor %}
      {% endif %}
    </div>
    <div
      role='button'
      tabindex='0'
      class='specs-cursor tw-opacity-0 tw-cursor-none tw-select-none tw-pointer-events-none tw-fixed tw-flex tw-justify-center tw-items-center tw-h-[104px] tw-w-[104px] tw-rounded-[80px] tw-bg-yellow tw-overflow-hidden tw-scale-0 tw-translate-x-[-50%] tw-translate-y-[-50%] tw-transition-[transform,opacity] tw-duration-200 tw-cur'
      style='transform-style: preserve-3d; transition-timing-function: linear(0 0%, 1 100%);'
    >
      <p class='tw-my-0 tw-text-md tw-font-body tw-ligatures-off tw-text-black'>Drag</p>
    </div>
  </div>

  <script>
    let cursor = document.querySelector('.specs-cursor');
    let context = document.querySelector(
      '#shopify-section-{{ section.id }} .product-specs.active .product-specs__media',
    );
    let canvas = document.querySelector('#shopify-section-{{ section.id }} .product-specs.active canvas');
    let video = document.querySelector('#shopify-section-{{ section.id }} .product-specs.active video');

    function initializeVideoAndCanvas() {
      if (!video || !canvas) return;

      const ctx = canvas.getContext('2d');

      // Set video attributes for better quality
      video.setAttribute('playsinline', '');
      video.setAttribute('webkit-playsinline', '');
      video.setAttribute('muted', '');
      video.setAttribute('preload', 'auto');

      // Function to handle initial frame drawing
      const drawInitialFrame = () => {
        // Get the container width
        const containerWidth = context.clientWidth;

        // Calculate dimensions maintaining aspect ratio
        const aspectRatio = video.videoWidth / video.videoHeight;
        const canvasWidth = containerWidth;
        const canvasHeight = containerWidth / aspectRatio;

        // Set canvas dimensions to match video's native resolution
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        // Set canvas style dimensions to match container while maintaining aspect ratio
        canvas.style.width = `${canvasWidth}px`;
        canvas.style.height = `${canvasHeight}px`;

        // Start the video at the middle
        video.currentTime = 0.5 * video.duration;

        // Wait for the timeupdate event before drawing
        const handleTimeUpdate = () => {
          // Draw initial frame at full resolution
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

          // Remove the event listener after drawing
          video.removeEventListener('timeupdate', handleTimeUpdate);
        };

        video.addEventListener('timeupdate', handleTimeUpdate);
      };

      // Handle video loading
      const handleVideoLoad = () => {
        if (video.readyState >= 2) {
          drawInitialFrame();
        }
      };

      // Add event listeners for video loading
      video.addEventListener('loadeddata', handleVideoLoad);
      video.addEventListener('loadedmetadata', handleVideoLoad);

      // If video is already loaded, draw immediately
      if (video.readyState >= 2) {
        drawInitialFrame();
      }
    }

    let mouseIsDown = false;
    let progressPixels = 0;
    let progressDecimal = 0;
    let dragStart = 0;
    let progressDrag = 0;
    let progressDragDecimal = 0;
    let rafId = null;
    let isUpdating = false;
    let isDragging = false;
    // Throttle function to limit the rate of updates
    function throttle(func, limit) {
      let inThrottle;
      return function (...args) {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => (inThrottle = false), limit);
        }
      };
    }

    // Throttled mousemove handler
    const handleMouseMove = throttle((e) => {
      if (!video || !context) return;

      progressPixels = Math.round(e.offsetX);
      progressDecimal = progressPixels / context.clientWidth;

      if (mouseIsDown) {
        if (!isDragging) {
          isDragging = true;
          dragStart = progressPixels;
        }
        progressDrag = progressPixels - dragStart;
        progressDragDecimal = 0.5 + progressDrag / context.clientWidth;
      } else {
        isDragging = false;
      }

      console.log(progressDrag, progressDragDecimal);

      if (!isUpdating && mouseIsDown) {
        isUpdating = true;
        video.currentTime = progressDragDecimal * video.duration;

        // Only request a new frame if we don't have one pending
        if (!rafId) {
          rafId = requestAnimationFrame(() => drawFrame(canvas.getContext('2d')));
        }
      }
    }, 50); // Throttle to max 20 updates per second

    if (context) {
      context.addEventListener('mousemove', handleMouseMove);
    }

    function drawFrame(ctx) {
      if (!video || !canvas) return;

      // Clear the canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw the video frame at full resolution
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      rafId = null;
      isUpdating = false;
    }

    // Cleanup function to prevent memory leaks
    function cleanup() {
      if (rafId) {
        cancelAnimationFrame(rafId);
      }
      if (context) {
        context.removeEventListener('mousemove', handleMouseMove);
      }
      if (video) {
        video.pause();
        video.currentTime = 0.5;
      }
    }

    // Clean up when the section is removed/changed
    document.addEventListener('shopify:section:unload', cleanup);

    document.body.addEventListener('mousedown', () => {
      mouseIsDown = true;
      if (context && context.matches(':hover')) {
        cursor.classList.remove('tw-opacity-100', 'tw-scale-100');
        cursor.classList.add('tw-opacity-0', 'tw-scale-0');
        context.classList.remove('tw-cursor-none');
        context.classList.add('tw-cursor-ew-resize');
      }
    });

    window.addEventListener('scroll', () => {
      if (context && context.matches(':hover')) {
        cursor.classList.add('tw-opacity-100', 'tw-scale-100');
        cursor.classList.remove('tw-opacity-0', 'tw-scale-0');
        context.classList.add('tw-cursor-ew-resize');
        context.classList.remove('tw-cursor-none');
      } else {
        cursor.classList.remove('tw-opacity-100', 'tw-scale-100');
        cursor.classList.add('tw-opacity-0', 'tw-scale-0');
        context.classList.remove('tw-cursor-ew-resize');
        context.classList.add('tw-cursor-none');
      }
    });

    document.body.addEventListener('mouseup', () => {
      mouseIsDown = false;
      if (context && context.matches(':hover')) {
        cursor.classList.remove('tw-opacity-0', 'tw-scale-0', 'tw-cursor-ew-resize');
        cursor.classList.add('tw-opacity-100', 'tw-scale-100', 'tw-cursor-none');
        context.classList.remove('tw-cursor-ew-resize');
        context.classList.add('tw-cursor-none');
      } else {
        cursor.classList.remove('tw-opacity-100', 'tw-scale-100', 'tw-cursor-none');
        cursor.classList.add('tw-opacity-0', 'tw-scale-0', 'tw-cursor-ew-resize');
        context.classList.remove('tw-cursor-none');
        context.classList.add('tw-cursor-ew-resize');
      }
    });

    document.addEventListener('mousemove', (e) => {
      cursor.style.top = `${e.clientY}px`;
      cursor.style.left = `${e.clientX}px`;

      if (context && context.matches(':hover')) {
        if (!mouseIsDown) {
          cursor.classList.add('tw-opacity-100', 'tw-scale-100');
          cursor.classList.remove('tw-opacity-0', 'tw-scale-0');
        }
      } else {
        cursor.classList.add('tw-opacity-0', 'tw-scale-0');
        cursor.classList.remove('tw-opacity-100', 'tw-scale-100');
      }
    });

    let specButtons = document.querySelectorAll('.spec-button');

    specButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const handle = button.dataset.handle;

        // Cleanup current video before switching
        cleanup();

        document.querySelector('.product-specs.active').classList.remove('active');
        document.querySelector(`.product-specs[data-handle="${handle}"]`).classList.add('active');

        // Update references to new elements
        context = document.querySelector(
          '#shopify-section-{{ section.id }} .product-specs.active .product-specs__media',
        );
        canvas = document.querySelector('#shopify-section-{{ section.id }} .product-specs.active canvas');
        video = document.querySelector('#shopify-section-{{ section.id }} .product-specs.active video');

        // Reinitialize video and canvas
        if (context) {
          context.addEventListener('mousemove', handleMouseMove);
        }

        // Initialize video and canvas
        initializeVideoAndCanvas();
      });
    });

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      // Wait a short moment to ensure everything is loaded
      setTimeout(() => {
        // Update references to current elements
        context = document.querySelector(
          '#shopify-section-{{ section.id }} .product-specs.active .product-specs__media',
        );
        canvas = document.querySelector('#shopify-section-{{ section.id }} .product-specs.active canvas');
        video = document.querySelector('#shopify-section-{{ section.id }} .product-specs.active video');

        // Initialize video and canvas
        initializeVideoAndCanvas();
      }, 100);
    });
  </script>

  <style>
    .specs-cursor.active {
      transform: scale(1) !important;
      opacity: 1 !important;
    }
    .spec-button {
      background-color: transparent;
      color: rgb(var(--color-background));
      font-size: 12px;
      padding: 10px;
      min-height: 30px;
      min-width: 100px;
    }
    .spec-button:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
    .spec-button span {
      color: rgb(var(--color-foreground));
    }
    .spec-button:before,
    .spec-button:after {
      content: none;
    }
    .spec-button.active {
      background-color: rgba(44, 118, 131, 1);
    }
    .product-specs:not(.active) {
      display: none !important;
    }
    .product-specs__media canvas {
      width: 100%;
      height: auto;
      display: block;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: crisp-edges;
      margin: 0 0 15vmin;
    }
    @media screen and (max-width: 749px) {
      .spec-button {
        padding: 6px;
        min-height: 24px;
        min-width: 80px;
      }
      .product-specs__media canvas {
        margin: 12.5vmin 0 25vmin;
      }
    }
  </style>
{% endif %}
{% schema %}
{
  "name": "Product Specs",
  "class": "section",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Find the size that's right for your dog"
    },
    {
      "type": "color_scheme",
      "id": "section_color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "color_scheme",
      "id": "section_color_scheme_inner",
      "label": "Inner Color scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Product Specs"
    }
  ]
}
{% endschema %}
